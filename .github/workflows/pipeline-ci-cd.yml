name: Basic workflow develop

# --------------------
# Déclencheurs (Triggers)
# Ici, le workflow se lance automatiquement à chaque push sur la branche `main`
# --------------------
on:
  push:
    branches:
      - main

# --------------------
# Variables globales
# Ici, on définit l’image Docker qui sera construite et poussée sur DockerHub
# --------------------
env:
  DOCKER_IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/frontend-app
  VITE_API_URL: https://api.11.lebondeveloppeur.net

jobs:
  # ========================================================
  # 1 - JOB : Exécuter les tests unitaires
  # ========================================================
  run-unit-test-job:
    runs-on: ubuntu-latest   # Machine virtuelle Ubuntu
    steps:
      # Étape 1 : Récupérer le code source depuis le repo
      - name: clone source code to runner 
        uses: actions/checkout@v5

      # Étape 2 : Installer les dépendances (Node.js/NPM)
      - name: install dependencies
        run: npm i

      # Étape 3 : Lancer les tests unitaires définis dans package.json
      - name: run unit test
        run: npm run test

  # ========================================================
  # 2 - JOB : Construire et pousser l’image Docker
  # (ne s’exécute que si les tests unitaires passent)
  # ========================================================
  build-docker-image-and-push:
    needs: run-unit-test-job  # Dépend du job précédent
    runs-on: ubuntu-latest
    steps:
        # Étape 1 : Récupérer le code source
        - name: clone source code to runner
          uses: actions/checkout@v5

        # Étape 2 : Construire l’image Docker docker build -t ${{ env.DOCKER_IMAGE }} .
        - name: build docker image
          run: docker build -t ${{ env.DOCKER_IMAGE }} --build-arg ${{ env.VITE_API_URL }} .

        # Étape 3 : Taguer l’image avec un numéro de version basé sur `run_number`
        - name: tag docker image
          run: docker tag ${{ env.DOCKER_IMAGE }} ${{ env.DOCKER_IMAGE }}:v${{ github.run_number }}

        # Étape 4 : Vérifier que les images existent bien en local
        - name: show docker images
          run: docker images

        # Étape 5 : (Optionnel) Afficher le username et token (debug)
        - name: show docker username and access-token
          run: |
            echo ${{ vars.DOCKERHUB_USERNAME }}
            echo ${{ secrets.DOCKERHUB_TOKEN }}

        # Étape 6 : Se connecter à DockerHub avec login/password (token)
        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ vars.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

        # Étape 7 : Pousser l’image versionnée sur DockerHub
        - name: push image to dockerhub
          run: docker push ${{ env.DOCKER_IMAGE }}:v${{ github.run_number }}

        # Étape 8 : Pousser également le tag `latest`
        - name: push latest image to dockerhub
          run: docker push ${{ env.DOCKER_IMAGE }}:latest

  # ========================================================
  # 3 - JOB : Déploiement sur un VPS
  # (ne s’exécute que si l’image a été build + push)
  # ========================================================
  deploy-to-vps:
    runs-on: ubuntu-latest
    needs: build-docker-image-and-push
    steps:
      # Étape 1 : Se connecter en SSH sur le VPS
      #           et exécuter des commandes de déploiement
      - name: Execute remote SSH commands using password
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}   # Adresse IP/nom du VPS
          username: user                  # Nom d’utilisateur (à adapter)
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            # Aller dans le dossier où est ton projet Docker Compose

            cd /home/user/devops-script/frontend/dev

            # Tirer la dernière image depuis DockerHub

            sudo docker compose pull 

            # Redémarrer le container avec la nouvelle image

            sudo docker compose up -d --force-recreate --remove-orphans



